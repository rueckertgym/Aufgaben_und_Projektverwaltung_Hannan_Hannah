@startuml
'https://plantuml.com/class-diagram

class AufgabenUndProjektverwaltungstool
class Projekte
class Aufgaben

class AufgabenUndProjektverwaltungstool{
    + AufgabenUndProjektverwaltungstool()
    + aufgabenInPriorityQueueEinfuegen(aufgabenstellung: String, deadline: String, wichtig: int): void
    + getAufgabenPriorityQueue(): PriorityQueue<Aufgaben>
    + getProjectList(): List<Projecte>
    + aufgabenAusPriorityQueueEntfernen(): void
    + projekteZuProjektlisteHinzufuegen(name: String, deadline: String, fortschritt: int, ressource: String, aufgaben: String): void
    + projekteAusProjektlisteEntfernen(nameDesProjekts: String): void
    + fortschrittUndDeadlineAllerProjekteAusgeben(): void
    + projektResourcenZuweisung(): void
    + projektFortschrittsueberwachung(projektName: String): void
    + fortschrittAktuallisieren(projektName: String, neuerFortschritt: double): void

}
class Main{
+ Mainclass()
+ main(args: String[]): void
}

class Projekte{
    - name: String
    - erstellungsdatum: LocalDate
    - deadline: LocalDate
    - fortschritt: double
    - ressourcen: List<String>
    - split: String[]
    - abhaengigkeiten: List<String>
    - splitAbhaengigkeiten: String[]

    + Projekte(name: String, deadline: String, fortschritt: double, ressourcen: String, aufgabenstellung: String)
    + getName(): String
    + setName(name: String): void
    + getErstellungsdatum(): LocalDate
    + setErstellungsdatum(erstellungsdatum: LocalDate): void
    + getDeadline(): LocalDate
    + setDeadline(deadline: String): void
    + getResourcen(): List<String>
    + ResourcenInListEinfuegen(ressource: String): void
    + getFortschritt(): double
    + setFortschritt(fortschritt: double): void
    + getSplit(): String[]
    + setSplit(split: String[]): void
    + getSplitAbheangigkeiten(): String[]
    + setSplitAbheangigkeiten(splitAbheangigkeiten: String[]): void


}

class Aufgaben{
    - aufgabenstellung: String
    - erstellungsdatum: LocalDate
    - deadline: LocalDate
    - wichtig: int

    + Aufgaben(aufgabenstellung: String, deadline: String, wichtig: int)
    + getAufgabenstellung(): String
    + setAufgabenstellung(aufgabenstellung: String): void
    + getErstellungsdatum(): LocalDate
    + setErstellungsdatum(erstellungsdatum: LocalDate): void
    + getDeadline(): LocalDate
    + setDeadline(deadline: LocalDate): void
    + getWichtig(): int
    + setWichtig(wichtig: int): void
    + compareTo(other: Aufgaben): int

}


AufgabenUndProjektverwaltungstool "-AufgabenPriorityQueue" --> PriorityQueue
AufgabenUndProjektverwaltungstool "-ProjektListe" --> List
@enduml